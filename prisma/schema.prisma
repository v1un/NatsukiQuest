// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GameSave {
  id        String   @id @default(cuid())
  state     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  gameSaves     GameSave[]
  loreEntries   LoreEntry[]
  quests        Quest[]
  reputations   Reputation[]
  environmentalDetails EnvironmentalDetail[]
  relationshipConflicts RelationshipConflict[]
}

// Lorebook system
model LoreEntry {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String
  tags        String[]
  isDiscovered Boolean @default(false)
  discoveredAt DateTime?
  location    String?
  characters  String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

// Quest system
model Quest {
  id          String      @id @default(cuid())
  title       String
  description String
  category    QuestType   @default(MAIN)
  status      QuestStatus @default(ACTIVE)
  objectives  Json        // Array of objectives with completion status
  rewards     Json?       // Items, experience, etc.
  startedAt   DateTime    @default(now())
  completedAt DateTime?
  location    String?
  npcsInvolved String[]
  prerequisites String[]  // Quest IDs that must be completed first
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

// Reputation and faction system
model Reputation {
  id         String   @id @default(cuid())
  faction    String   // Faction/group name
  level      Int      @default(0) // -100 to 100 scale
  title      String?  // Current title with faction
  history    Json     // Array of reputation changes with reasons
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@unique([userId, faction])
}

// Environmental storytelling
model EnvironmentalDetail {
  id              String   @id @default(cuid())
  location        String
  description     String
  interactionType InteractionType @default(EXAMINE)
  loreId          String?
  questId         String?
  isDiscovered    Boolean  @default(false)
  discoveredAt    DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
}

// Relationship conflict system
model RelationshipConflict {
  id          String      @id @default(cuid())
  characters  String[]    // Characters involved in conflict
  type        ConflictType @default(PERSONAL)
  severity    Int         @default(1) // 1-10 scale
  description String
  triggers    String[]    // Actions that can escalate/resolve
  consequences Json       // Array of consequences
  isActive    Boolean     @default(true)
  startedAt   DateTime    @default(now())
  resolvedAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

enum QuestType {
  MAIN
  SIDE
  ROMANCE
  FACTION
  EXPLORATION
}

enum QuestStatus {
  ACTIVE
  COMPLETED
  FAILED
  PAUSED
}

enum InteractionType {
  EXAMINE
  INTERACT
  LORE
  QUEST
}

enum ConflictType {
  JEALOUSY
  RIVALRY
  ROMANCE
  POLITICAL
  PERSONAL
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
